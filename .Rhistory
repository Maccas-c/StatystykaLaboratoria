vec,
xlab = "Liczba błędów",
ylab = "Prawdopodobieństwo",
main = "Rozkład empiryczny liczby błędów"
)
vec = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
# wykres słupkowy
barplot(
sort(vec),
xlab = "Liczba błędów",
ylab = "Prawdopodobieństwo",
main = "Rozkład empiryczny liczby błędów"
)
qq_2 = matrix(
c(probs),
nrow = 1,
byrow = TRUE
)
vec = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
# wykres słupkowy
barplot(
vec,
xlab = "Liczba błędów",
ylab = "Prawdopodobieństwo",
main = "Rozkład empiryczny liczby błędów"
)
# wykres słupkowy
barplot(
prop.table(table(vec)),
xlab = "Liczba błędów",
ylab = "Prawdopodobieństwo",
main = "Rozkład empiryczny liczby błędów"
)
# Zadanie 4 ---------------------------------------------------------------
vec = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
# wykres słupkowy
barplot(
table(vec),
xlab = "Liczba błędów",
ylab = "Prawdopodobieństwo",
main = "Rozkład empiryczny liczby błędów"
)
qplot(as.factor(vec), geom="histogram")
# histogram z estymatorem jądrowym gęstości
hist(vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen")
lines(density(vec), col = "red", lwd = 2)
# empiryczny
lines(density(vec), col = "red", lwd = 2)
# teoretyczny
lines(dnorm(vec), col = "red", lwd = 2)
# empiryczny
lines(density(vec), col = "red", lwd = 2)
# teoretyczny
lines(dunif(vec), col = "red", lwd = 2)
# histogram z estymatorem jądrowym gęstości
hist(vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen")
# empiryczny
lines(density(vec), col = "red", lwd = 2)
# teoretyczny
lines(dunif(vec), col = "red", lwd = 2)
# histogram z estymatorem jądrowym gęstości
hist(vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen")
# empiryczny
lines(density(vec), col = "red", lwd = 2)
# teoretyczny
# histogram z estymatorem jądrowym gęstości
hist(vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen")
# empiryczny
lines(density(vec), col = "red", lwd = 2)
# teoretyczny
lambda <- 0.5
curve(VGAM::drayleigh(x, sqrt(lambda / 2)),
xlim = c(0, 4), ylab = "f(x)", main = "Gęstość", lwd = 2)
# histogram z estymatorem jądrowym gęstości
hist(vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen")
# empiryczny
lines(density(vec), col = "red", lwd = 2)
# teoretyczny
lambda <- 0.5
lines(curve(VGAM::drayleigh(x, sqrt(lambda / 2)),
xlim = c(0, 4), ylab = "f(x)", main = "Gęstość", lwd = 2))
# teoretyczny
lambda <- 4
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "green",
add = TRUE,
lwd = 2
)
# histogram z estymatorem jądrowym gęstości
hist(
vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(vec),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- 4
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "green",
add = TRUE,
lwd = 2
)
legend(
"topright",
lwd = 2,
col = 1:3,
legend = c(
"R(0.5)",
"R(1)",
"R(2)"
)
)
hist(
vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(vec),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- 5.144
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "green",
add = TRUE,
lwd = 2
)
# histogram z estymatorem jądrowym gęstości
hist(
vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(vec),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- 35.42
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "green",
add = TRUE,
lwd = 2
)
# histogram z estymatorem jądrowym gęstości
hist(
vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(vec),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- ENW
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "blue",
add = TRUE,
lwd = 2
)
rozklad_rayleighta = VGAM::drayleigh(x, sqrt(lambda / 2))
VGAM::prayleigh(rozklad_rayleighta)
VGAM::prayleigh(x, sqrt(lambda / 2))
VGAM::qrayleigh(x, sqrt(lambda / 2))
VGAM::qrayleigh(x, sqrt(ENW / 2))
# estymator najlepszej wiarygodności
ENW = 35.42
rozklad_rayleighta = VGAM::drayleigh(x, sqrt(ENW / 2))
VGAM::qrayleigh(x, sqrt(ENW / 2))
lambda <- ENW
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "blue",
add = TRUE,
lwd = 2
)
# histogram z estymatorem jądrowym gęstości
hist(
vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(vec),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- ENW
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "blue",
add = TRUE,
lwd = 2
)
hist(
vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(vec),
col = "red",
lwd = 2
)
VGAM::qrayleigh(x, sqrt(lambda / 2))
rayleigh(x, sqrt(lambda / 2))
for (i in vec) print(i)
ENW = 0
for (i in vec) {
ENW = ENW + sqrt(pow(i, 2)/2)
}
ENW = ENW / length(vec)
ENW = 0
for (i in vec) {
ENW = ENW + sqrt(power(i, 2)/2)
}
ENW = ENW / length(vec)
ENW = 0
for (i in vec) {
ENW = ENW + sqrt(power*power/2)
}
ENW = ENW / length(vec)
ENW = 0
for (i in vec) {
ENW = ENW + sqrt(i*i/2)
}
ENW = ENW / length(vec)
ENW = 0
for (i in vec) {
ENW = ENW + i*i/2
}
ENW = sqrt(ENW / length(vec))
vec = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
# 1.
# sugeruję rozkład Rayleigha
# 2.
# estymator największej wiarygodności z definicji
# https://ocw.mit.edu/ans7870/18/18.443/s15/projects/Rproject3_rmd_rayleigh_theory.html
ENW = 0
for (i in vec) {
ENW = ENW + i*i/2
}
ENW = sqrt(ENW / length(vec))
# 3,
# histogram z estymatorem jądrowym gęstości
hist(
vec,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(vec),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- ENW
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "blue",
add = TRUE,
lwd = 2
)
# 4.
# 5.
# 6.
# 7.
ENW = 0
for (i in vec) {
ENW = ENW + i*i/2
}
ENW = sqrt(ENW / length(vec))
ENW = 35.42
EnvStats::eunif(czas_oczek_tramwaj, method = "mle")
library(EnvStats)
EnvStats::eunif(vec, method = "mle")
install.packages("EnvStats")
library(EnvStats)
EnvStats::eunif(vec, method = "mle")
EnvStats::eunif(vec, method = "mle")
ENW = EnvStats::eunif(vec, method = "mle")
View(ENW)
ENW = EnvStats::eunif(vec, method = "mle")$parameters
qqplot(runif(length(wiatr), min = a_est, max = b_est), wiatr)
qqline(wiatr, distribution = function(probs) { qunif(probs, min = a_est, max = b_est) })
wiatr = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
qqplot(runif(length(wiatr), min = a_est, max = b_est), wiatr)
qqline(wiatr, distribution = function(probs) { qunif(probs, min = a_est, max = b_est) })
# estmatory
(a_est <- min(wiatr))
(b_est <- max(wiatr))
qqplot(runif(length(wiatr), min = a_est, max = b_est), wiatr)
qqline(wiatr, distribution = function(probs) { qunif(probs, min = a_est, max = b_est) })
EnvStats::qqPlot(wiatr,
distribution = "unif",
param.list = list(min = a_est, max = b_est),
add.line = TRUE
)
mean(4 <= wiatr <= 8)
mean(c(wiatr >= 4 & wiatr <= 8))
1 - punif(4, min = min(wiatr), max = max(wiatr))
# estymatory: min i max
min_w = min(wiatr)
max_w = max(wiatr)
# empirycznie
mean(c(wiatr >= 4 & wiatr <= 8))
# teoretycznie
1 - punif(3, min = min_w, max = max_w) - (1 - punif(8, min = min_w, max = max_w))
# estymatory: min i max
min_w = min(wiatr)
max_w = max(wiatr)
# empirycznie
mean(c(wiatr >= 4 & wiatr <= 8))
# teoretycznie
1 - punif(4, min = min_w, max = max_w) - (1 - punif(8, min = min_w, max = max_w))
# teoretycznie
1 - punif(4, min = min_w, max = max_w) - (1 - punif(9, min = min_w, max = max_w))
# teoretycznie
1 - punif(4, min = min_w, max = max_w) - (1 - punif(7, min = min_w, max = max_w))
1 - punif(4, min = min_w, max = max_w) - (1 - punif(8, min = min_w, max = max_w))
1 - punif(3, min = min_w, max = max_w) - (1 - punif(8, min = min_w, max = max_w))
1 - punif(5, min = min_w, max = max_w) - (1 - punif(8, min = min_w, max = max_w))
punif(4, min = min_w, max = max_w)
punif(8, min = min_w, max = max_w)
1 - punif(4, min = min_w, max = max_w)
1 - punif(8, min = min_w, max = max_w)
punif(4, min = min_w, max = max_w)
punif(8, min = min_w, max = max_w)
1 - punif(4, min = min_w, max = max_w) - punif(8, min = min_w, max = max_w))
1 - punif(4, min = min_w, max = max_w) - punif(8, min = min_w, max = max_w)
1 - punif(4, min = min_w, max = max_w) + punif(8, min = min_w, max = max_w)
1 - punif(4, min = min_w, max = max_w) + 1 - punif(8, min = min_w, max = max_w)
1 - punif(4, min = min_w, max = max_w) - punif(8, min = min_w, max = max_w)
punif(8, min = min_w, max = max_w)
punif(3, min = min_w, max = max_w)
punif(3, min = min_w, max = max_w) + 1 - punif(8, min = min_w, max = max_w)
1 - (punif(3, min = min_w, max = max_w) + 1 - punif(8, min = min_w, max = max_w))
1 - (punif(4, min = min_w, max = max_w) + 1 - punif(8, min = min_w, max = max_w))
1 - (punif(4, min = min_w, max = max_w) + 1 - punif(8, min = min_w, max = max_w))
1 - (punif(3, min = min_w, max = max_w) + 1 - punif(8, min = min_w, max = max_w))
punif(3, min = min_w, max = max_w) + punif(8, min = min_w, max = max_w)
punif(3, min = min_w, max = max_w) - punif(8, min = min_w, max = max_w)
punif(3, min = min_w, max = max_w) - 1 + punif(8, min = min_w, max = max_w)
punif(3, min = min_w, max = max_w) + 1 - punif(8, min = min_w, max = max_w)
1 - punif(3, min = min_w, max = max_w) - 1 - punif(8, min = min_w, max = max_w)
1 - punif(3, min = min_w, max = max_w) - 1 + punif(8, min = min_w, max = max_w)
# teoretycznie
more_than_4 = 1 - punif(3, min = min_w, max = max_w)
more_than_8 = 1 - punif(8, min = min_w, max = max_w)
more_than_4 - more_than_8
more_than_8 = punif(8, min = min_w, max = max_w)
more_than_4 - more_than_8
# teoretycznie
more_than_4 = 1 - punif(3, min = min_w, max = max_w)
more_than_8 = 1 - punif(8, min = min_w, max = max_w)
more_than_4 - more_than_8
more_than_4 = 1 - VGAM::prayleigh(3, min = min_w, max = max_w)
more_than_8 = 1 - VGAM::prayleigh(8, min = min_w, max = max_w)
more_than_4 - more_than_8
# teoretycznie
more_than_4 = 1 - VGAM::prayleigh(3)
more_than_8 = 1 - VGAM::prayleigh(8)
more_than_4 - more_than_8
more_than_4 = VGAM::prayleigh(3)
more_than_8 = VGAM::prayleigh(8)
more_than_4 - more_than_8
# histogram z estymatorem jądrowym gęstości
hist(
wiatr,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(wiatr),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- ENW
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "blue",
add = TRUE,
lwd = 2
)
# 2.
# estymator największej wiarygodności
ENW = EnvStats::eunif(wiatr, method = "mle")$parameters
ENW = 35.42
lambda = ENW
# 3,
# histogram z estymatorem jądrowym gęstości
hist(
wiatr,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(wiatr),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- ENW
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "blue",
add = TRUE,
lwd = 2
)
ENW = mean(x = 0:5)
ENW = mean(wiatr^2)
# empirycznie
mean(c(wiatr >= 4 & wiatr <= 8))
# teoretycznie
more_than_4 = VGAM::prayleigh(3)
more_than_8 = VGAM::prayleigh(8)
between_4_and_8 = more_than_4 - more_than_8
# histogram z estymatorem jądrowym gęstości
hist(
wiatr,
xlab = "Czas oczekiwania na tramwaj",
main = "Rozkład empiryczny czasu oczekiwania na tramwaj",
probability = TRUE,
col = "lightgreen"
)
# empiryczny
lines(
density(wiatr),
col = "red",
lwd = 2
)
# teoretyczny
lambda <- ENW
curve(
VGAM::drayleigh(x, sqrt(lambda / 2)),
col = "blue",
add = TRUE,
lwd = 2
)
# wykres kwantyl-kwantyl
EnvStats::qqPlot(
wiatr,
distribution = "unif",
param.list = list(
min = min(wiatr),
max = max(wiatr)
),
add.line = TRUE
)
