data_po <- c(89, 92, 98, 95, 95, 92, 95, 92, 98, 101)
boxplot(data_przed, data_po)
## [1] 0.7025892
qqnorm(data_przed)
qqline(data_przed)
## [1] 0.691489
qqnorm(data_po)
qqline(data_po)
mean(data_przed)
mean(data_po)
wzrost_m <- c(171, 176, 179, 189, 176, 182, 173, 179, 184, 186, 189, 167, 177)
wzrost_k <- c(161, 162, 163, 162, 166, 164, 168, 165, 168, 157, 161, 172)
boxplot(wzrost_m, wzrost_k)
## [1] 0.8595396
qqnorm(wzrost_m)
qqline(wzrost_m)
## [1] 0.9447828
qqnorm(wzrost_k)
qqline(wzrost_k)
## [1] 45.74359
## [1] 16.08333
## [1] 0.04689163
mean(wzrost_m)
mean(wzrost_k)
t.test(data_A, data_B, var.equal = TRUE, alternative = 'greater')$p.value
t.test(data_A, data_B, var.equal = TRUE, alternative = 'greater')
t.test(data_A, data_B, var.equal = TRUE, alternative = 'less')
t.test(data_A, data_B, var.equal = TRUE, alternative = 'equal')
t.test(data_A, data_B, var.equal = TRUE, alternative = 'two.sided')
var.test(data_przed, data_po)
var.test(data_przed, data_po)
var.test(data_przed, data_po, alternative = 'less')
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_A, data_B, alternative = 'greater')
var.test(data_A, data_B, alternative = 'less')
var.test(data_A, data_B, alternative = 'less')$p.value
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_przed, data_po, alternative = 'less')
var.test(data_przed, data_po, alternative = 'two.sided')
var(data_przed)
var(data_przed)
var(data_po)
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_przed, data_po, alternative = 'less')
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')$p.value
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')
shapiro.test(data_przed)
qqline(data_B)
shapiro.test(data_przed)$p.value
shapiro.test(data_po)$p.value
## [1] 0.8595396
shapiro.test(wzrost_m)$p.value
shapiro.test(wzrost_k)$p.value
shapiro.test(wzrost_k)$p.value
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')$p.value
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'less')
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'less')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'greater')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'greater')
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'less')
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')$p.value
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')
var.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')
var(wzrost_k)
var.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')$p.value
## [1] 45.74359
## [1] 16.08333
var(wzrost_m)
var(wzrost_k)
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'less')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'two.sided')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'two.sided')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'less')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'less')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'greater')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'two.sided')$p.value
x <- c(862, 870, 876, 866, 871, 865, 861, 873, 871, 872)
shapiro.test(x)$p.value
mean(x)
var(x)
shapiro.test(x)$p.value
shapiro.test(x)$p.value
shapiro.test(x)
var(x)
## [1] 0.2136555
t.test(x, m = 870, alternative = 'less')
## [1] 0.2136555
t.test(x, m = 870, alternative = 'less')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, alternative = 'less')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, alternative = 'less')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, alternative = 'greater')$p.value
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt%22)
colnames(dane) <- c("number", "context")
summary(dane)
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt)
colnames(dane) <- c("number", "context")
summary(dane)
# Zadanie 2 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
colnames(dane) <- c("number", "context")
summary(dane)
source('~/Desktop/R/8_analiza_wariancji.R')
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
colnames(dane) <- c("number", "context")
summary(dane)
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
View(dane)
View(dane)
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
aggregate(
dane$context,
list(CONTEXT = dane$context),
FUN = mean
)
dane
colnames(dane) <- c("number", "context")
summary(dane)
colnames(dane) <- c("number", "context")
dane = summary(dane)
# ZajÄ™cia 8 ####
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
## 1.
colnames(dane) <- c("number", "context")
dane = summary(dane)
dane = data.frame(
)
aggregate(
dane$context,
list(CONTEXT = dane$context),
FUN = mean
)
boxplot(
response ~ context,
data = dane
)
## 2.
## 3.
## 4.
## 5.
# Zadanie 2 ---------------------------------------------------------------
## 1.
## 2.
## 3.
## 4.
## 5.
## 6.
print(data)
data
print(data)
# ZajÄ™cia 8 ####
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
## 1.
colnames(dane) <- c("number", "context")
summary(dane)
print(data)
aggregate(
dane$context,
list(CONTEXT = dane$context),
FUN = mean
)
boxplot(
response ~ context,
data = dane
)
## 2.
## 3.
## 4.
## 5.
# Zadanie 2 ---------------------------------------------------------------
## 1.
## 2.
## 3.
## 4.
## 5.
## 6.
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
print(dane)
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
## 1.
colnames(dane) <- c("number", "context")
dane = summary(dane)
print(dane)
aggregate(
dane$context,
list(CONTEXT = dane$context),
FUN = mean
)
aggregate(
dane[1],
list(CONTEXT = dane$context),
FUN = mean
)
aggregate(
dane[1],
list(CONTEXT = dane[1]),
FUN = mean
)
aggregate(
dane[1],
list(CONTEXT = dane),
FUN = mean
)
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
aggregate(
dane,
list(CONTEXT = dane),
FUN = mean
)
aggregate(
dane,
list(CONTEXT = dane),
FUN = mean
)
# Zadanie 1 ---------------------------------------------------------------
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
## 1.
colnames(dane) <- c("number", "context")
dane = summary(dane)
print(dane)
aggregate(
dane,
list(CONTEXT = dane),
FUN = mean
)
colnames(dane) <- c("number", "context")
dane = summary(dane)
print(dane)
aggregate(
dane[,'number'],
list(CONTEXT = dane[,'context']),
FUN = mean
)
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/kontekst.txt")
## 1.
colnames(dane) <- c("number", "context")
aggregate(dane$number,
list(DOSE = dane$context),
FUN = mean)
boxplot(
response ~ context,
data = dane
)
aggregate(dane$number,
list(CONTEXT = dane$context),
FUN = mean)
boxplot(
response ~ context,
data = dane
)
boxplot(
context ~ number,
data = dane
)
aggregate(
dane$number,
list(CONTEXT = dane$context),
FUN = mean
)
boxplot(
context ~ number,
data = dane
)
boxplot(
number ~ context,
data = dane
)
summary(
aov(
number ~ context,
data = dane
)
)
shapiro.test(
lm(
number ~ context,
data = dane
)
$context
)
shapiro.test(
lm(
number ~ context,
data = dane
)
$number
)
shapiro.test(
lm(
number ~ context,
data = dane
)
$residuals
)$p.value
shapiro.test(
lm(
number ~ context,
data = dane
)
$residuals
)$p.value
qqnorm(dane)
qqline(dane)
qqnorm(dane$number)
qqline(dane$umber)
qqline(dane$number)
bartlett.test(number ~ context, data = dane)
bartlett.test(number ~ context, data = dane)$p.value
leveneTest(number ~ context, data = dane)$p.value
library(car)
leveneTest(number ~ context, data = dane)$p.value
leveneTest(number ~ context, data = dane)
leveneTest(number ~ context, data = dane)$Pr
leveneTest(number ~ context, data = dane, center = "mean")$Pr
attach(dane)
pairwise.t.test(number, context, data = dane)
model_aov <- aov(number ~ context, data = dane)
TukeyHSD(model_aov)
## 4.
# testy post hoc
attach(dane)
pairwise.t.test(number, context, data = dane)
model_aov <- aov(number ~ context, data = dane)
TukeyHSD(model_aov)
plot(TukeyHSD(model_aov))
library(agricolae)
HSD.test(model_aov, "context", console = TRUE)
SNK.test(model_aov, "context", console = TRUE)
LSD.test(model_aov, "context", p.adj = "holm", console = TRUE)
scheffe.test(model_aov, "context", console = TRUE)
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt")
View(dane)
View(dane)
colnames(dane) <- c("Wynik", "Instrukcja")
View(model_aov)
View(model_aov)
View(dane)
View(dane)
## 1.
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt")[,c(2,3)]
View(dane)
View(dane)
## 1.
colnames(dane) <- c("Wynik", "Instrukcja")
View(dane)
View(dane)
## 2.
aggregate(
dane$wynik,
list(CONTEXT = dane$instrukcja),
FUN = mean
)
## 2.
aggregate(
dane$instrukcja,
list(CONTEXT = dane$wynik),
FUN = mean
)
View(dane)
View(dane)
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt")[,c(2,3)]
colnames(dane) <- c("wynik", "instrukcja")
## 2.
aggregate(
dane$instrukcja,
list(CONTEXT = dane$wynik),
FUN = mean
)
aggregate(
dane$wynik,
list(CONTEXT = dane$instrukcja),
FUN = mean
)
## 1.
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt")[,c(2,3)]
colnames(dane) <- c("wynik", "instrukcja")
## 2.
aggregate(
dane$wynik,
list(CONTEXT = dane$instrukcja),
FUN = mean
)
aggregate(
dane$wynik,
list(Instrukcja = dane$instrukcja),
FUN = mean
)
View(dane)
View(dane)
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt")[,c(2,3)]
colnames(dane) <- c("wynik", "instrukcja")
## 2.
aggregate(
dane$wynik,
list(Instrukcja = dane$instrukcja),
FUN = mean
)
## 1.
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt", header=TRUE)[,c(2,3)]
colnames(dane) <- c("wynik", "instrukcja")
aggregate(
dane$wynik,
list(Instrukcja = dane$instrukcja),
FUN = mean
)
boxplot(
wynik ~ instrukcja,
data = dane
)
## 1.
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt", header=TRUE)[,c(2,3)]
summary(
aov(
wynik ~ instrukcja,
data = dane
)
)
## 1.
dane <- read.table("http://ls.home.amu.edu.pl/data_sets/Eysenck.txt", header=TRUE)[,c(2,3)]
colnames(dane) <- c("wynik", "instrukcja")
## 2.
aggregate(
dane$wynik,
list(Instrukcja = dane$instrukcja),
FUN = mean
)
boxplot(
wynik ~ instrukcja,
data = dane
)
## 3.
summary(
aov(
wynik ~ instrukcja,
data = dane
)
)
## 4.
shapiro.test(
lm(
wynik ~ instrukcja,
data = dane
)
$residuals
)$p.value
shapiro.test(
lm(
wynik ~ instrukcja,
data = dane
)
$residuals
)$p.value
qqnorm(dane$wynik)
qqline(dane$wynik)
bartlett.test(wynik ~ instrukcja, data = dane)$p.value
fligner.test(wynik ~ instrukcja, data = dane)$
library(car)
leveneTest(wynik ~ instrukcja, data = dane)$Pr
fligner.test(wynik ~ instrukcja, data = dane)$
library(car)
fligner.test(wynik ~ instrukcja, data = dane)$
leveneTest(wynik ~ instrukcja, data = dane)$Pr
fligner.test(wynik ~ instrukcja, data = dane)$
leveneTest(wynik ~ instrukcja, data = dane)$Pr
fligner.test(wynik ~ instrukcja, data = dane)$
leveneTest(wynik ~ instrukcja, data = dane)
fligner.test(wynik ~ instrukcja, data = dane)$p.value
library(car)
leveneTest(wynik ~ instrukcja, data = dane)$Pr
leveneTest(wynik ~ instrukcja, data = dane, center = "mean")$Pr
## 5.
# testy post hoc
attach(dane)
pairwise.t.test(number, context, data = dane)
## 5.
# testy post hoc
attach(dane)
pairwise.t.test(wynik, instrukcja, data = dane)
model_aov <- aov(wynik ~ instrukcja, data = dane)
TukeyHSD(model_aov)
plot(TukeyHSD(model_aov))
library(agricolae)
HSD.test(model_aov, "instrukcja", console = TRUE)
SNK.test(model_aov, "instrukcja", console = TRUE)
LSD.test(model_aov, "instrukcja", p.adj = "holm", console = TRUE)
scheffe.test(model_aov, "instrukcja", console = TRUE)
