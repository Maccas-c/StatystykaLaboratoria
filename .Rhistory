est = ENW,
l = LCL,
r = UCL,
conf_level = conf_level
)
class(w) <- "confint"
return(w)
}
# 2
wiatr = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
median_cint(wiatr)
# Zadanie 4 ---------------------------------------------------------------
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego <- function(x, conf_level = 0.95) {
n = length(x)
LCL = max(x) / nthroot(1 - conf_level/2, n)
UCL = max(x) / nthroot(conf_level/2, n)
return(c(LCL, UCL))
}
source('~/Desktop/R/6.R')
# Zajęcia 6 ####
# Zadanie 1 ---------------------------------------------------------------
load(url("http://ls.home.amu.edu.pl/data_sets/Centrala.RData"))
# sugeruję rozkład Poissona, zatem funkcja to epois
library(EnvStats)
b_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "pearson",
conf.level = conf_level
)$interval$limits
return(c(u))
}
d_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "pearson.hartley.approx",
conf.level = conf_level
)$interval$limits
return(c(u))
}
c_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "normal.approx",
conf.level = conf_level
)$interval$limits
return(c(u))
}
b_conf_int(Centrala$Liczba)
d_conf_int(Centrala$Liczba)
c_conf_int(Centrala$Liczba)
# Zadanie 2 ---------------------------------------------------------------
Awaria = as.numeric(unlist(read.table("awarie.txt")))
# sugeruję rozkład wykładniczy
# zgodnie z tabelą https://pl.wikipedia.org/wiki/Rozk%C5%82ad_wyk%C5%82adniczy
# wariancja to parametr^-2, wartość oczekiwana to par^-1
wariancja <- function(x, conf_level = 0.95) {
u <- eexp(
x,
ci = TRUE,
ci.method = "exact",
conf.level = conf_level
)
temp = u$interval$limits ** -2
return(temp)
}
expected_value <- function(x, conf_level = 0.95) {
u <- eexp(
x,
ci = TRUE,
ci.method = "exact",
conf.level = conf_level
)
temp = u$interval$limits ** -1
return(temp)
}
wariancja(Awaria)
expected_value(Awaria)
# Zadanie 3 ---------------------------------------------------------------
# 1
print.confint <- function(x) {
cat(x$conf_level * 100, "percent confidence interval:", "\n")
cat(x$l, " ", x$r, "\n")
}
summary.confint <- function(x) {
cat("\n", "Confidence interval of", x$title, "\n", "\n")
cat(x$conf_level * 100, "percent confidence interval:", "\n")
cat(x$l, " ", x$r, "\n")
cat("sample estimate", "\n")
cat(x$est, "\n")
}
median_cint <- function(x, conf_level = 0.95){
n = length(x)
z = qnorm(1 - (1 - conf_level) / 2, 0, 1)
LCL = sqrt(ln(2) * mean(x ** 2) * (1 - z / sqrt(n)))
UCL = sqrt(ln(2) * mean(x ** 2) * (1 + z / sqrt(n)))
ENW = mean(LCL, UCL)
w = list(
title = "mediana",
est = ENW,
l = LCL,
r = UCL,
conf_level = conf_level
)
class(w) <- "confint"
return(w)
}
# 2
wiatr = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
median_cint(wiatr)
# Zadanie 4 ---------------------------------------------------------------
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego <- function(x, conf_level = 0.95) {
n = length(x)
LCL = max(x) / nthroot(1 - conf_level/2, n)
UCL = max(x) / nthroot(conf_level/2, n)
return(c(LCL, UCL))
}
rez = median_cint(wiatr)
print(rez)
summary(rez)
# Zajęcia 6 ####
# Zadanie 1 ---------------------------------------------------------------
load(url("http://ls.home.amu.edu.pl/data_sets/Centrala.RData"))
# sugeruję rozkład Poissona, zatem funkcja to epois
library(EnvStats)
b_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "pearson",
conf.level = conf_level
)$interval$limits
return(c(u))
}
d_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "pearson.hartley.approx",
conf.level = conf_level
)$interval$limits
return(c(u))
}
c_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "normal.approx",
conf.level = conf_level
)$interval$limits
return(c(u))
}
b_conf_int(Centrala$Liczba)
d_conf_int(Centrala$Liczba)
c_conf_int(Centrala$Liczba)
# Zadanie 2 ---------------------------------------------------------------
Awaria = as.numeric(unlist(read.table("awarie.txt")))
# sugeruję rozkład wykładniczy
# zgodnie z tabelą https://pl.wikipedia.org/wiki/Rozk%C5%82ad_wyk%C5%82adniczy
# wariancja to parametr^-2, wartość oczekiwana to par^-1
wariancja <- function(x, conf_level = 0.95) {
u <- eexp(
x,
ci = TRUE,
ci.method = "exact",
conf.level = conf_level
)
temp = u$interval$limits ** -2
return(temp)
}
expected_value <- function(x, conf_level = 0.95) {
u <- eexp(
x,
ci = TRUE,
ci.method = "exact",
conf.level = conf_level
)
temp = u$interval$limits ** -1
return(temp)
}
wariancja(Awaria)
expected_value(Awaria)
# Zadanie 3 ---------------------------------------------------------------
# 1
print.confint <- function(x) {
cat(x$conf_level * 100, "percent confidence interval:", "\n")
cat(x$l, " ", x$r, "\n")
}
summary.confint <- function(x) {
cat("\n", "Confidence interval of", x$title, "\n", "\n")
cat(x$conf_level * 100, "percent confidence interval:", "\n")
cat(x$l, " ", x$r, "\n")
cat("sample estimate", "\n")
cat(mean(x$l, x$r), "\n")
}
median_cint <- function(x, conf_level = 0.95){
n = length(x)
z = qnorm(1 - (1 - conf_level) / 2, 0, 1)
LCL = sqrt(ln(2) * mean(x ** 2) * (1 - z / sqrt(n)))
UCL = sqrt(ln(2) * mean(x ** 2) * (1 + z / sqrt(n)))
ENW = mean(LCL, UCL)
w = list(
title = "mediana",
est = ENW,
l = LCL,
r = UCL,
conf_level = conf_level
)
class(w) <- "confint"
return(w)
}
# 2
wiatr = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
rez = median_cint(wiatr)
print(rez)
summary(rez)
# Zadanie 4 ---------------------------------------------------------------
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego <- function(x, conf_level = 0.95) {
n = length(x)
LCL = max(x) / nthroot(1 - conf_level/2, n)
UCL = max(x) / nthroot(conf_level/2, n)
return(c(LCL, UCL))
}
# Zajęcia 6 ####
# Zadanie 1 ---------------------------------------------------------------
load(url("http://ls.home.amu.edu.pl/data_sets/Centrala.RData"))
# sugeruję rozkład Poissona, zatem funkcja to epois
library(EnvStats)
b_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "pearson",
conf.level = conf_level
)$interval$limits
return(c(u))
}
d_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "pearson.hartley.approx",
conf.level = conf_level
)$interval$limits
return(c(u))
}
c_conf_int <- function(x, conf_level = 0.95) {
u <- epois(
x,
ci = TRUE,
ci.method = "normal.approx",
conf.level = conf_level
)$interval$limits
return(c(u))
}
b_conf_int(Centrala$Liczba)
d_conf_int(Centrala$Liczba)
c_conf_int(Centrala$Liczba)
# Zadanie 2 ---------------------------------------------------------------
Awaria = as.numeric(unlist(read.table("awarie.txt")))
# sugeruję rozkład wykładniczy
# zgodnie z tabelą https://pl.wikipedia.org/wiki/Rozk%C5%82ad_wyk%C5%82adniczy
# wariancja to parametr^-2, wartość oczekiwana to par^-1
wariancja <- function(x, conf_level = 0.95) {
u <- eexp(
x,
ci = TRUE,
ci.method = "exact",
conf.level = conf_level
)
temp = u$interval$limits ** -2
return(temp)
}
expected_value <- function(x, conf_level = 0.95) {
u <- eexp(
x,
ci = TRUE,
ci.method = "exact",
conf.level = conf_level
)
temp = u$interval$limits ** -1
return(temp)
}
wariancja(Awaria)
expected_value(Awaria)
# Zadanie 3 ---------------------------------------------------------------
# 1
print.confint <- function(x) {
cat(x$conf_level * 100, "percent confidence interval:", "\n")
cat(x$l, " ", x$r, "\n")
}
summary.confint <- function(x) {
cat("\n", "Confidence interval of", x$title, "\n", "\n")
cat(x$conf_level * 100, "percent confidence interval:", "\n")
cat(x$l, " ", x$r, "\n")
cat("sample estimate", "\n")
cat(x$est, "\n")
}
median_cint <- function(x, conf_level = 0.95){
n = length(x)
z = qnorm(1 - (1 - conf_level) / 2, 0, 1)
LCL = sqrt(ln(2) * mean(x ** 2) * (1 - z / sqrt(n)))
UCL = sqrt(ln(2) * mean(x ** 2) * (1 + z / sqrt(n)))
ENW = mean(c(LCL, UCL))
w = list(
title = "mediana",
est = ENW,
l = LCL,
r = UCL,
conf_level = conf_level
)
class(w) <- "confint"
return(w)
}
# 2
wiatr = c(0.9, 6.2, 2.1, 4.1, 7.3, 1.0, 4.6, 6.4, 3.8, 5.0, 2.7, 9.2, 5.9, 7.4, 3.0, 4.9, 8.2, 5.0, 1.2, 10.1, 12.2, 2.8, 5.9, 8.2, 0.5)
rez = median_cint(wiatr)
print(rez)
summary(rez)
# Zadanie 4 ---------------------------------------------------------------
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego <- function(x, conf_level = 0.95) {
n = length(x)
LCL = max(x) / nthroot(1 - conf_level/2, n)
UCL = max(x) / nthroot(conf_level/2, n)
return(c(LCL, UCL))
}
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego <- function(x, conf_level = 0.95) {
u <- enorm(
x,
conf.level = conf_level
)
temp = u$interval$limits
return(temp)
}
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego(wiatr, 0.95)
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego <- function(x, conf_level = 0.95) {
u <- enorm(
x,
conf.level = conf_level
)
temp = u$interval$limits
return(u)
}
granica_przedziału_ufności_wartosci_oczekiwanej_rozkładu_normalnego(wiatr, 0.95)
x <- c(862, 870, 876, 866, 871, 865, 861, 873, 871, 872);
shapiro <- shapiro.test(x)
p_val <- shapiro$p.value
p_val
mean(x)
data_A = c(78.2, 78.5, 75.6, 78.5, 78.5, 77.4, 76.6)
data_B = c(76.1, 75.2, 75.8, 77.3, 77.3, 77.0, 74.4, 76.2, 73.5, 77.4)
boxplot(data_A)
shapiro.test(data_A)
qqnorm(data_A)
qqline(data_A)
var(data_A)
var.test(data_A, data_B, alternative = 'less')
mean(data_A)
t.test(data_A, data_B, var.equal = TRUE, alternative = 'greater')
t.test(mean(data_A), mean(data_B), alternative = 'greater', paired = TRUE)
shapiro.test(data_A)$p.value
shapiro.test(data_B)$p.value
var(data_A)
mean(data_A)
var(data_B)
var(data_B)
mean(data_A)
mean(data_B)
t.test(data_A, data_B, var.equal = TRUE, alternative = 'greater')
t.test(data_A, data_B, var.equal = TRUE, alternative = 'greater')$p.value
boxplot(data_A, data_B)
a <- c(84, 87, 87, 90, 90, 90, 90, 93, 93, 96)
b <- c(89, 92, 98, 95, 95, 92, 95, 92, 98, 101)
boxplot(a, b)
shapiro.test(a)
qqnorm(a)
qqline(a)
qqnorm(b)
qqline(b)
mean(a)
mean(a)
mean(b)
t.test(a, b, alternative = 'greater', paired = TRUE)
a <- c(171, 176, 179, 189, 176, 182, 173, 179, 184, 186, 189, 167, 177)
b <- c(161, 162, 163, 162, 166, 164, 168, 165, 168, 157, 161, 172)
boxplot(a, b)
qqnorm(a)
qqline(a)
mean(a)
mean(a)
mean(b)
# Zadanie 1 ---------------------------------------------------------------
x <- c(862, 870, 876, 866, 871, 865, 861, 873, 871, 872)
shapiro.test(x)$p.value
mean(x)
var(x)
shapiro.test(x)
data_przed <- c(84, 87, 87, 90, 90, 90, 90, 93, 93, 96)
data_po <- c(89, 92, 98, 95, 95, 92, 95, 92, 98, 101)
boxplot(data_przed, data_po)
## [1] 0.7025892
qqnorm(data_przed)
qqline(data_przed)
## [1] 0.691489
qqnorm(data_po)
qqline(data_po)
mean(data_przed)
mean(data_po)
wzrost_m <- c(171, 176, 179, 189, 176, 182, 173, 179, 184, 186, 189, 167, 177)
wzrost_k <- c(161, 162, 163, 162, 166, 164, 168, 165, 168, 157, 161, 172)
boxplot(wzrost_m, wzrost_k)
## [1] 0.8595396
qqnorm(wzrost_m)
qqline(wzrost_m)
## [1] 0.9447828
qqnorm(wzrost_k)
qqline(wzrost_k)
## [1] 45.74359
## [1] 16.08333
## [1] 0.04689163
mean(wzrost_m)
mean(wzrost_k)
t.test(data_A, data_B, var.equal = TRUE, alternative = 'greater')$p.value
t.test(data_A, data_B, var.equal = TRUE, alternative = 'greater')
t.test(data_A, data_B, var.equal = TRUE, alternative = 'less')
t.test(data_A, data_B, var.equal = TRUE, alternative = 'equal')
t.test(data_A, data_B, var.equal = TRUE, alternative = 'two.sided')
var.test(data_przed, data_po)
var.test(data_przed, data_po)
var.test(data_przed, data_po, alternative = 'less')
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_A, data_B, alternative = 'greater')
var.test(data_A, data_B, alternative = 'less')
var.test(data_A, data_B, alternative = 'less')$p.value
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_przed, data_po, alternative = 'less')
var.test(data_przed, data_po, alternative = 'two.sided')
var(data_przed)
var(data_przed)
var(data_po)
var.test(data_przed, data_po, alternative = 'greater')
var.test(data_przed, data_po, alternative = 'less')
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')$p.value
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')
shapiro.test(data_przed)
qqline(data_B)
shapiro.test(data_przed)$p.value
shapiro.test(data_po)$p.value
## [1] 0.8595396
shapiro.test(wzrost_m)$p.value
shapiro.test(wzrost_k)$p.value
shapiro.test(wzrost_k)$p.value
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')$p.value
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'less')
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'less')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'greater')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'greater')
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'less')
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')$p.value
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')
var.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')
var(wzrost_k)
var.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')$p.value
## [1] 45.74359
## [1] 16.08333
var(wzrost_m)
var(wzrost_k)
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'greater')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'less')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, var.equal = TRUE, alternative = 'two.sided')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'two.sided')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'less')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, var.equal = TRUE, alternative = 'greater')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'less')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'greater')$p.value
## [1] 0.0003786878
var.test(data_przed, data_po, alternative = 'two.sided')$p.value
x <- c(862, 870, 876, 866, 871, 865, 861, 873, 871, 872)
shapiro.test(x)$p.value
mean(x)
var(x)
shapiro.test(x)$p.value
shapiro.test(x)$p.value
shapiro.test(x)
var(x)
## [1] 0.2136555
t.test(x, m = 870, alternative = 'less')
## [1] 0.2136555
t.test(x, m = 870, alternative = 'less')$p.value
## [1] 0.0003786878
t.test(data_przed, data_po, alternative = 'less')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, alternative = 'less')$p.value
## [1] 6.928802e-07
t.test(wzrost_m, wzrost_k, alternative = 'greater')$p.value
